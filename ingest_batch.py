import os
import logging
from core.ingest import process_document, DATA_DIR, SUPPORTED_TYPES  # ‡πÉ‡∏ä‡πâ SUPPORTED_TYPES ‡πÅ‡∏ó‡∏ô

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def ingest_all_documents():
    """
    Sequential ingestion ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô DATA_DIR
    - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö pdf, docx, txt, csv (‡∏ï‡∏≤‡∏° SUPPORTED_TYPES)
    - ‡πÉ‡∏ä‡πâ process_document ‡∏à‡∏≤‡∏Å core/ingest.py
    """
    logger.info("üöÄ Starting ingestion for all documents in %s", DATA_DIR)

    if not os.path.exists(DATA_DIR):
        logger.warning("‚ö†Ô∏è DATA_DIR %s does not exist", DATA_DIR)
        return

    for root, _, files in os.walk(DATA_DIR):
        for f in files:
            ext = os.path.splitext(f)[1].lower()
            if ext in SUPPORTED_TYPES:  # ‡πÅ‡∏Å‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                filepath = os.path.join(root, f)
                logger.info("üìÑ Ingesting %s", filepath)
                try:
                    process_document(filepath, f)  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢
                except Exception as e:
                    logger.error("‚ùå Error ingesting %s: %s", filepath, str(e))

    logger.info("‚úÖ Ingestion completed.")

if __name__ == "__main__":
    ingest_all_documents()
