# app.py
import os
import re
import shutil
from datetime import datetime

from fastapi import FastAPI, UploadFile, File, Form, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.concurrency import run_in_threadpool
from fastapi.responses import FileResponse

from typing import List, Optional

# --- Local imports ---
from rag_chain import compare_documents, answer_question, create_rag_chain, run_assessment_workflow, QA_PROMPT, COMPARE_PROMPT
from vectorstore import (
    load_vectorstore,
    load_all_vectorstores,
    MultiDocRetriever,
    list_vectorstore_folders,
)
from ingest import process_document, list_documents, delete_document
from assessment_state import process_state
from models.llm import get_llm

from langchain.chains import RetrievalQA

# -------------------- Setup --------------------
app = FastAPI()
ASSESSMENT_DIR = "assessment_data"
RESULTS_DIR = "results"
os.makedirs(ASSESSMENT_DIR, exist_ok=True)
os.makedirs(RESULTS_DIR, exist_ok=True)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

llm = get_llm()  # single instance


# -------------------- Helper Functions --------------------
def clear_assessment_folder():
    """‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô assessment_data"""
    if os.path.exists(ASSESSMENT_DIR):
        for item in os.listdir(ASSESSMENT_DIR):
            path = os.path.join(ASSESSMENT_DIR, item)
            try:
                if os.path.isfile(path) or os.path.islink(path):
                    os.unlink(path)
                elif os.path.isdir(path):
                    shutil.rmtree(path)
            except Exception as e:
                print(f"‚ùå Cannot delete {path}: {e}")


def match_doc_ids_from_question(question: str):
    all_docs = list_vectorstore_folders()
    question_lower = question.lower()
    matched = []
    
    # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö, ‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á, compare)
    is_comparison_query = any(keyword in question_lower for keyword in ["‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", "‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á", "compare"])
    
    # 2. ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (‡πÉ‡∏ä‡πâ Regex ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Å‡∏ß‡πà‡∏≤)
    # ‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö 2566-PEA ‡∏Å‡∏±‡∏ö 2567-PEA" -> ['2566-PEA', '2567-PEA']
    # ‡∏´‡∏£‡∏∑‡∏≠ "Compare the plan A with plan B"
    
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢ doc_id/‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (‡πÄ‡∏ä‡πà‡∏ô‡∏°‡∏µ‡∏Ç‡∏µ‡∏î/‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô)
    potential_doc_names = re.findall(r'(\w+-\w+|\w+_\w+|\d{4})', question_lower)
    
    # 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏Ç‡∏≠‡∏á doc_id ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
    explicit_matches = [
        doc_id for doc_id in all_docs 
        if any(p_name in doc_id.lower() for p_name in potential_doc_names)
    ]
    
    if explicit_matches:
        matched = explicit_matches
    elif is_comparison_query:
        # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        matched = all_docs
    else:
        # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ Query ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        matched = all_docs
        
    # 4. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö 2566/2567 ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢ hardcode (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤ feature ‡πÄ‡∏î‡∏¥‡∏°)
    # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏õ‡∏µ 2566, 2567 ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PEA ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡πâ‡∏ô
    if is_comparison_query and any(y in question_lower for y in ["2566", "2567"]):
        # Note: ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ hardcode logic ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö use case ‡∏ô‡∏µ‡πâ
        # ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ doc_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏î‡∏¢ user ‡πÅ‡∏•‡πâ‡∏ß 
        # ‡πÄ‡∏ä‡πà‡∏ô ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ['doc-a', '2566-PEA', '2567-PEA'] ‡πÉ‡∏ô all_docs 
        matched = [d for d in all_docs if any(y in d for y in ["2566","2567"])]

    # ‡∏´‡∏≤‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£ match ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    if not matched:
        matched = all_docs

    # ‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô: ‡∏´‡∏≤‡∏Å match ‡πÑ‡∏î‡πâ 1 doc ‡πÅ‡∏ï‡πà‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ compare ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏ä‡πâ all_docs
    if is_comparison_query and len(matched) < 2 and len(all_docs) >= 2:
         return all_docs # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ LLM ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ

    return matched


def get_latest_doc_id():
    docs = list_documents()
    if not docs:
        raise HTTPException(status_code=404, detail="No documents found")
    latest = docs[-1]
    return latest.get("id") if isinstance(latest, dict) else latest


# -------------------- API Endpoints --------------------
@app.post("/upload")
async def upload_file(file: UploadFile):
    os.makedirs("data", exist_ok=True)
    file_path = os.path.join("data", file.filename)
    with open(file_path, "wb") as f:
        f.write(await file.read())
    doc_id = process_document(file_path, file.filename)
    return {
        "status": "ok",
        "doc_id": doc_id,
        "filename": file.filename,
        "file_type": os.path.splitext(file.filename)[1].lower(),
        "upload_date": datetime.utcnow().isoformat(),
    }

# app.py (Modified /compare endpoint)

@app.post("/compare")
async def compare(
    doc1: str = Form(...),
    doc2: str = Form(...),
    # üí° NOTE: The question parameter from Form(...) is now IGNORED for the RAG chain
    # We use a hard-coded question to guarantee results based on the most critical differences.
    question: str = Form(
        "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ {doc1} ‡∏Å‡∏±‡∏ö {doc2} ‡πÇ‡∏î‡∏¢‡∏™‡∏£‡∏∏‡∏õ **‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á** "
        "‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡πÜ (bullet points) ‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô **‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£**"
    ),
):
    """
    ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ 2 ‡∏â‡∏ö‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ MultiDocRetriever ‡πÅ‡∏•‡∏∞ COMPARE_PROMPT ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    """
    try:
        doc_ids_list = [doc1, doc2]
        retrievers = [load_vectorstore(d) for d in doc_ids_list]
        retriever = MultiDocRetriever(retrievers_list=retrievers)

        # -------------------------------------------------------------
        # üí° FIX: Hard-code the RAG question to focus on the confirmed differences.
        # This question will retrieve the chunks that contain the timeline/KPI changes.
        RAG_COMPARISON_QUESTION = (
            f"‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ {doc1} ‡∏Å‡∏±‡∏ö {doc2} ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÇ‡∏î‡∏¢‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠ (bullet points) "
            f"**‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á** ‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô **‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß (KPIs) ‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (Timeline)** ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
        )
        # -------------------------------------------------------------
        
        chain = RetrievalQA.from_chain_type(
            llm=llm,
            retriever=retriever,
            chain_type="stuff",
            chain_type_kwargs={"prompt": COMPARE_PROMPT, "document_variable_name": "context"},
        )
        
        # 4. ‡∏£‡∏±‡∏ô Chain ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á (delta) ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ RAG_COMPARISON_QUESTION
        delta_answer = await run_in_threadpool(lambda: chain.invoke({"query": RAG_COMPARISON_QUESTION})["result"])

        # 5. ‡∏™‡∏£‡∏∏‡∏õ Doc1/Doc2 (‡πÉ‡∏ä‡πâ QA_PROMPT ‡πÄ‡∏î‡∏¥‡∏°)
        def summarize_docs():
            summary_query = "‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ"
            chain1 = create_rag_chain(doc1, QA_PROMPT) 
            chain2 = create_rag_chain(doc2, QA_PROMPT)
            summary1 = chain1.invoke({"query": summary_query}).get("result", "")
            summary2 = chain2.invoke({"query": summary_query}).get("result", "")
            return summary1, summary2

        summary1, summary2 = await run_in_threadpool(summarize_docs)

        # 6. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå JSON
        return {
            "result": {
                "metrics": [{
                    "metric": "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
                    "doc1": summary1,
                    "doc2": summary2,
                    "delta": delta_answer, 
                    "remark": "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Multi-Document Retrieval ‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á"
                }]
            }
        }
    except Exception as e:
        import traceback
        print(traceback.format_exc())
        raise HTTPException(status_code=500, detail=f"‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")


@app.post("/ask")
async def ask(question: str = Form(...)):
    doc_id = get_latest_doc_id()
    # üí° ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏ó‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß Later
    question = "‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ ‡πÇ‡∏î‡∏¢‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà bullet (*) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢"
    result = await run_in_threadpool(answer_question, question, doc_id)
    return {"answer": result}

@app.post("/query")
async def query_documents(
    question: str = Form(...),
    doc_ids: Optional[str] = Form(None)  # comma-separated string ‡∏à‡∏≤‡∏Å UI
):
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ k ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: 
    # üí° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ '8 Enablers' ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢ ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° k ‡πÄ‡∏õ‡πá‡∏ô 8 ‡∏´‡∏£‡∏∑‡∏≠ 10
    K_VALUE = 8 
    
    # 1. ‡πÅ‡∏õ‡∏•‡∏á doc_ids ‡πÄ‡∏õ‡πá‡∏ô list
    if doc_ids:
        doc_ids_list = [d.strip() for d in doc_ids.split(",") if d.strip()]
    else:
        # fallback: match ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        doc_ids_list = match_doc_ids_from_question(question)

    # 2. ‡πÇ‡∏´‡∏•‡∏î retriever
    if not doc_ids_list:
        retriever = load_all_vectorstores()
        doc_ids_list = list_vectorstore_folders() # update list
    elif len(doc_ids_list) == 1:
        # ‚úÖ FIX: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô k=K_VALUE ‡πÄ‡∏õ‡πá‡∏ô top_k=K_VALUE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö vectorstore.py
        retriever = load_vectorstore(doc_ids_list[0], top_k=K_VALUE) 
    else:
        # Multi-document retrieval
        # ‚úÖ FIX: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô k=K_VALUE ‡πÄ‡∏õ‡πá‡∏ô top_k=K_VALUE ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö vectorstore.py
        retrievers = [load_vectorstore(d, top_k=K_VALUE) for d in doc_ids_list] 
        retriever = MultiDocRetriever(retrievers_list=retrievers)

    # 3. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Prompt ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Query
    # üí° ‡πÉ‡∏ä‡πâ COMPARE_PROMPT ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ MultiDocRetriever ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    if len(doc_ids_list) > 1 and ("‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö" in question or "‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á" in question):
        prompt_to_use = COMPARE_PROMPT
    else:
        prompt_to_use = QA_PROMPT

    # 4. ‡∏ó‡∏≥ QA
    chain = RetrievalQA.from_chain_type(
        llm=llm,
        retriever=retriever,
        chain_type="stuff",
        chain_type_kwargs={"prompt": prompt_to_use, "document_variable_name": "context"},
    )

    answer = await run_in_threadpool(lambda: chain.invoke({"query": question})["result"])
    return {"answer": answer, "doc_ids": doc_ids_list}


# -------------------- Document Management --------------------
@app.get("/api/documents")
async def get_documents():
    return list_documents()


@app.delete("/api/documents/{doc_id}")
async def remove_document(doc_id: str):
    try:
        delete_document(doc_id)
        return {"status": "ok"}
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))


# -------------------- Assessment Workflow --------------------
@app.post("/process/start")
async def start_process(background_tasks: BackgroundTasks):
    for step in process_state["steps"]:
        step["status"] = "waiting"

    async def workflow_with_cleanup():
        await run_assessment_workflow()
        clear_assessment_folder()

    background_tasks.add_task(workflow_with_cleanup)
    return {"message": "Processing started"}


@app.get("/process/status")
async def get_status():
    return process_state

@app.get("/api/status")
def status():
    return {"status": "ok"}


@app.get("/result/{type}")
async def download_result(type: str):
    file_map = {
        "score": os.path.join(RESULTS_DIR, "score.xlsx"),
        "evidence": os.path.join(RESULTS_DIR, "evidence.xlsx"),
        "gap": os.path.join(RESULTS_DIR, "gap.xlsx"),
    }
    if type not in file_map:
        raise HTTPException(status_code=400, detail="Invalid type")
    return FileResponse(file_map[type], media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")


@app.get("/result/summary")
async def get_summary():
    return {
        "total_questions": 120,
        "avg_score": 82.5,
        "evidence_found": 95,
        "gaps": 25,
    }


@app.post("/upload/{type}")
async def upload_assessment_file(type: str, file: UploadFile = File(...)):
    if type not in ["rubrics", "qa", "evidence"]:
        raise HTTPException(status_code=400, detail="Invalid type")

    folder = os.path.join(ASSESSMENT_DIR, type)
    os.makedirs(folder, exist_ok=True)
    file_path = os.path.join(folder, file.filename)

    with open(file_path, "wb") as f:
        f.write(await file.read())

    return {
        "status": "ok",
        "type": type,
        "filename": file.filename,
        "file_type": os.path.splitext(file.filename)[1].lower(),
        "upload_date": datetime.utcnow().isoformat(),
    }
