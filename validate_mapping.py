import os
import json
from typing import Set

# üìç ‡∏û‡∏≤‡∏ò‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
MAPPING_FILE_PATH = "evidence_checklist/km_evidence_mapping.json"

# **‚úÖ FIX: ‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏ò‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå (Relative Path)**
VECTOR_STORE_BASE_PATH = "vectorstore/evidence" 

def load_mapping_doc_ids(file_path: str) -> Set[str]:
    """
    ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå mapping ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á Doc ID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å 'filter_ids' ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ Clean ‡∏ä‡∏∑‡πà‡∏≠
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            mapping_data = json.load(f)
    except FileNotFoundError:
        print(f"‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Mapping ‡∏ó‡∏µ‡πà‡∏û‡∏≤‡∏ò: {os.path.abspath(file_path)}")
        return set()
    except json.JSONDecodeError:
        print(f"‚ùå ERROR: ‡πÑ‡∏ü‡∏•‡πå Mapping ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {file_path}")
        return set()

    all_doc_ids = set()
    for key in mapping_data:
        filter_ids = mapping_data[key].get("filter_ids", [])
        if isinstance(filter_ids, list):
            all_doc_ids.update(set(filter_ids)) 
            
    return all_doc_ids

def check_doc_id_existence(doc_ids: Set[str], base_path: str) -> tuple[Set[str], Set[str]]:
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Doc ID (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°) ‡∏°‡∏µ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Vector Store (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°) ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    """
    missing_ids = set(doc_ids)
    found_ids = set()

    # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏≤‡∏ò‡πÄ‡∏ï‡πá‡∏°‡∏≠‡∏µ‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏ä‡πâ Relative Path
    if not os.path.exists(base_path):
        print(f"‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Vector Store ‡∏ó‡∏µ‡πà‡∏û‡∏≤‡∏ò: {os.path.abspath(base_path)}")
        return set(), doc_ids 

    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°)
    try:
        existing_folders = set([
            item for item in os.listdir(base_path) 
            if os.path.isdir(os.path.join(base_path, item))
        ])
    except Exception as e:
        print(f"‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {base_path} ‡πÑ‡∏î‡πâ: {e}")
        return set(), doc_ids
        
    # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Doc ID (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å Mapping) ‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å Vector Store)
    for doc_id in doc_ids:
        if doc_id in existing_folders:
            found_ids.add(doc_id)
            if doc_id in missing_ids:
                missing_ids.remove(doc_id) 

    return found_ids, missing_ids

def main():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
    """
    # 1. ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° Doc ID
    all_doc_ids_to_check = load_mapping_doc_ids(MAPPING_FILE_PATH)
    total_ids = len(all_doc_ids_to_check)
    
    if total_ids == 0:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö Doc ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Mapping")
        return

    # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á Doc ID ‡πÉ‡∏ô Vector Store
    found_ids, missing_ids = check_doc_id_existence(all_doc_ids_to_check, VECTOR_STORE_BASE_PATH)
    
    # 3. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if missing_ids:
        print("\n## üî¥ Doc ID ‡∏ó‡∏µ‡πà **‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ** ‡πÉ‡∏ô Vector Store (‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Mapping ‡∏´‡∏£‡∏∑‡∏≠ Ingest ‡πÉ‡∏´‡∏°‡πà):")
        sorted_missing = sorted(list(missing_ids))
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Å‡πà‡∏≠‡∏ô
        print(f"‡∏£‡∏ß‡∏° Doc ID ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: **{total_ids}**")
        print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Doc ID ‡∏ó‡∏µ‡πà **‡πÑ‡∏°‡πà‡∏û‡∏ö** (Missing): **{len(missing_ids)}**")
        print("-" * 25)

        for doc_id in sorted_missing:
            # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            if sorted_missing.index(doc_id) < 20: 
                 print(f"- {doc_id}")
            else:
                 print(f"‡πÅ‡∏•‡∏∞ Doc ID ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å {len(missing_ids) - 20} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...")
                 break
    else:
        print("\nüéâ ‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! Doc ID ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Mapping File ‡∏û‡∏ö‡πÉ‡∏ô Vector Store ‡∏Ñ‡∏£‡∏±‡∏ö.")

if __name__ == "__main__":
    main()