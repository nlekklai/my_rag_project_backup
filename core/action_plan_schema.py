from pydantic import BaseModel, Field
from typing import List, Dict, Any

# üö® NOTE: conlist ‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏≠‡∏≠‡∏Å ‡πÅ‡∏•‡∏∞ List ‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏ó‡∏ô

class ActionItem(BaseModel):
    """Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Action ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Action Plan"""
    Statement_ID: str = Field(..., description="‡∏£‡∏∞‡∏ö‡∏∏ ID ‡∏Ç‡∏≠‡∏á Statement ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏µ‡πà Action ‡∏ô‡∏µ‡πâ‡∏°‡∏∏‡πà‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÄ‡∏ä‡πà‡∏ô L2 S3, L1 S1, ‡∏Ø‡∏•‡∏Ø)")
    Failed_Level: int = Field(..., description="Level ‡∏ó‡∏µ‡πà Statement ‡∏ô‡∏µ‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏ä‡πà‡∏ô 1, 2, 3)")
    Recommendation: str = Field(..., description="‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Gap ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô Statement ‡∏ô‡∏µ‡πâ")
    Target_Evidence_Type: str = Field(..., description="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á (‡πÄ‡∏ä‡πà‡∏ô Policy Document, Signed Meeting Minutes, Training Record, ‡∏Ø‡∏•‡∏Ø)")
    Key_Metric: str = Field(..., description="‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á Action ‡∏ô‡∏µ‡πâ (‡πÄ‡∏ä‡πà‡∏ô Document approved by CXO, 90% staff trained)")

class ActionPlanActions(BaseModel):
    """Schema ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå JSON ‡∏Ç‡∏≠‡∏á Action Plan"""
    Phase: str = Field(..., description="‡∏ä‡∏∑‡πà‡∏≠ Phase ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô '1. Foundational Gap Closure'")
    Goal: str = Field(..., description="‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Phase ‡∏ô‡∏µ‡πâ")
    
    # üö® FIX: ‡πÉ‡∏ä‡πâ List[ActionItem] ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î constraint min_length ‡∏ú‡πà‡∏≤‡∏ô Field
    Actions: List[ActionItem] = Field(
        ..., 
        description="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Actions ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        min_length=1 
    )