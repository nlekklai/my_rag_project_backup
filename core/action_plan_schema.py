# core/action_plan_schema.py
from pydantic import BaseModel, Field, field_validator
from typing import List

# -----------------------------------------------------------------------------
# üìò Action Plan Schema for Structured LLM Output
# -----------------------------------------------------------------------------
# ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà LLM ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ (Action Plan) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô maturity
# -----------------------------------------------------------------------------

class ActionItem(BaseModel):
    """üìå Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Action ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô Action Plan"""
    Statement_ID: str = Field(
        ..., 
        description="‡∏£‡∏∞‡∏ö‡∏∏ ID ‡∏Ç‡∏≠‡∏á Statement ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏ó‡∏µ‡πà Action ‡∏ô‡∏µ‡πâ‡∏°‡∏∏‡πà‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÄ‡∏ä‡πà‡∏ô 'L2 S3', 'L1 S1', ‡∏Ø‡∏•‡∏Ø)"
    )
    Failed_Level: int = Field(
        ..., 
        description="Level ‡∏ó‡∏µ‡πà Statement ‡∏ô‡∏µ‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏ä‡πà‡∏ô 1, 2, 3)"
    )
    Recommendation: str = Field(
        ..., 
        description="‡∏Ç‡πâ‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Gap ‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô Statement ‡∏ô‡∏µ‡πâ"
    )
    Target_Evidence_Type: str = Field(
        ..., 
        description="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á (‡πÄ‡∏ä‡πà‡∏ô Policy Document, Signed Meeting Minutes, Training Record, ‡∏Ø‡∏•‡∏Ø)"
    )
    Key_Metric: str = Field(
        ..., 
        description="‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á Action ‡∏ô‡∏µ‡πâ (‡πÄ‡∏ä‡πà‡∏ô Document approved by CXO, 90% staff trained)"
    )


class ActionPlanActions(BaseModel):
    """
    üéØ Schema ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå JSON ‡∏Ç‡∏≠‡∏á Action Plan
    
    ‡πÉ‡∏ä‡πâ validate JSON ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å LLM ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° format ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
    """
    Phase: str = Field(
        ..., 
        description="‡∏ä‡∏∑‡πà‡∏≠ Phase ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô '1. Foundational Gap Closure'"
    )
    Goal: str = Field(
        ..., 
        description="‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Phase ‡∏ô‡∏µ‡πâ"
    )
    Actions: List[ActionItem] = Field(
        ..., 
        description="‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Actions ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
        min_length=1
    )

    # -------------------------------------------------------------------------
    # üß© Validation Helper: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà LLM ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 'actions' (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å)
    # -------------------------------------------------------------------------
    @field_validator("Actions", mode="before")
    @classmethod
    def handle_lowercase_key(cls, v):
        """
        ‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏£‡∏ì‡∏µ LLM ‡∏™‡πà‡∏á key 'actions' ‡πÅ‡∏ó‡∏ô 'Actions'
        """
        if isinstance(v, dict) and "actions" in v:
            return v["actions"]
        return v
