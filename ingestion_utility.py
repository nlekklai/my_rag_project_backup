import os
import shutil
# ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ core.ingest ‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô process_document ‡πÅ‡∏•‡∏∞ delete_document
from core.ingest import process_document, delete_document

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• (‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå)
ASSESSMENT_DIR = "assessment_data"

# ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ 4 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å (‡∏ä‡∏∑‡πà‡∏≠ Key ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠ Vectorstore Collection ID)
FOLDERS = {
    "rubrics": os.path.join(ASSESSMENT_DIR, "rubrics"), 
    "qa": os.path.join(ASSESSMENT_DIR, "qa"),           
    "feedback": os.path.join(ASSESSMENT_DIR, "feedback"), 
    "evidence": os.path.join(ASSESSMENT_DIR, "evidence"), 
}
VECTORSTORE_DIR = "vectorstore" # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö Vectorstore

# -------------------------------------------------------------
print(f"--- Starting Document Ingestion for Assessment Workflow ({ASSESSMENT_DIR}) ---")

# 1. ‡∏•‡∏ö Vectorstore ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤ Ingestion ‡πÉ‡∏´‡∏°‡πà)
print("\nüßπ Cleaning up old vector stores...")
# ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (e.g., 'rubrics', 'qa') ‡πÄ‡∏õ‡πá‡∏ô doc_id ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
for folder_name in FOLDERS.keys():
    # ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ doc_id ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠ Collection (e.g., 'rubrics')
    try:
        delete_document(folder_name) 
        print(f"  - Deleted old vector store for collection: {folder_name}")
    except Exception:
        # ‡∏´‡∏≤‡∏Å‡∏•‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà) ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ
        pass
            
print("üßπ Cleanup complete.")
# -------------------------------------------------------------

files_processed_count = 0
for folder_key, folder_path in FOLDERS.items():
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    if not os.path.exists(folder_path):
        print(f"‚ö†Ô∏è Warning: Directory '{folder_path}' not found. Skipping.")
        continue
        
    print(f"\nProcessing Folder: '{folder_key}' (Vectorstore ID: {folder_key})...")
    
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡πà‡∏≠‡∏¢
    files = [f for f in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, f)) and not f.startswith('.')]
    
    if not files:
        print(f"  ‚ÑπÔ∏è No files found in the {folder_key} directory.")
        
    for file in files:
        file_path = os.path.join(folder_path, file)
        
        print(f"  - Ingesting '{file}'...")
        
        # 2. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Logic ‡πÉ‡∏´‡∏°‡πà
        try:
            # process_document ‡∏à‡∏∞‡πÉ‡∏ä‡πâ folder_key ('rubrics') ‡πÄ‡∏õ‡πá‡∏ô vectorstore ID
            # ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå ('file') ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà core.ingest ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            process_document(file_path, file) 
            print(f"  ‚úÖ Successfully indexed '{file}' into collection '{folder_key}'")
            files_processed_count += 1
        except Exception as e:
            print(f"  ‚ùå Critical Error processing {file}: {e}")

print(f"\n--- Document Ingestion Complete. Total files indexed: {files_processed_count} ---")
